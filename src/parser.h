// Parser verifies if the lexemes generated by scanner complies with the
// TruPL grammar.
// @author Hieu Le
// @version November 6th, 2016

#ifndef PARSER_H
#define PARSER_H

// The parser needs to access token attributes.
#include "token.h"
#include "keywordtoken.h"
#include "punctoken.h"
#include "reloptoken.h"
#include "addoptoken.h"
#include "muloptoken.h"
#include "idtoken.h"
#include "numtoken.h"
#include "eoftoken.h"
#include "scanner.h"

// To print error messages.
#include <iostream>

using namespace std;

class Parser {
 public:
  // Constructs a Parser for a given Scanner.
  explicit Parser (Scanner *the_scanner);
  
  ~Parser();

  // Checks if the Scanner output generates a valid TruPL program.
  bool parse_program();

  // Return true if current token is EOF.
  bool done_with_input();
  
 private:

  bool parse_decl_list();
  // etc, etc...; one for each non-terminal in TruPL 2.0
  
  // The lexical analyzer
  Scanner *lex;
  // The current token the parser is looking at
  Token *word;
  
  /* Print out a parse error message:
	 
     "Parse error: Expected *expected*, found *found*."

     This method should delete the string after it has printed the
     error message. */
  void parse_error (string *expected, Token *found);

  // Other helper functions that you may define
  
};

#endif
